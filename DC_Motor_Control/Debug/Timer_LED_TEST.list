
Timer_LED_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000284  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800040c  08000414  00001414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800040c  0800040c  00001414  2**0
                  CONTENTS
  4 .ARM          00000000  0800040c  0800040c  00001414  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800040c  08000414  00001414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800040c  0800040c  0000140c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000410  08000410  00001410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001414  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000045e  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000123  00000000  00000000  000018a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  000019c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000003f  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000000e0  00000000  00000000  00001a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000068e  00000000  00000000  00001b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088425  00000000  00000000  000021d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008a5fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c0  00000000  00000000  0008a640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0008a700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003f4 	.word	0x080003f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080003f4 	.word	0x080003f4

080001c8 <gpio_init>:

void gpio_init(void);
void TIM2_PWM_init(void);
void TIM4_ms_Delay(uint16_t delay);

void gpio_init(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    // Activer l'horloge pour GPIOA
    RCC->AHB1ENR |= GPIOAEN;
 80001cc:	4b11      	ldr	r3, [pc, #68]	@ (8000214 <gpio_init+0x4c>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a10      	ldr	r2, [pc, #64]	@ (8000214 <gpio_init+0x4c>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30

    // PA2 en mode Alternate Function (TIM2_CH3)
    GPIOA->MODER &= ~(3U << 4); // Clear
 80001d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000218 <gpio_init+0x50>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000218 <gpio_init+0x50>)
 80001de:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80001e2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2U << 4); // Mode AF (10 en binaire)
 80001e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000218 <gpio_init+0x50>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000218 <gpio_init+0x50>)
 80001ea:	f043 0320 	orr.w	r3, r3, #32
 80001ee:	6013      	str	r3, [r2, #0]

    // Configurer PA2 en Alternate Function 1 (AF1 pour TIM2)
    GPIOA->AFR[0] &= ~(0xF << 8); // Efface AF
 80001f0:	4b09      	ldr	r3, [pc, #36]	@ (8000218 <gpio_init+0x50>)
 80001f2:	6a1b      	ldr	r3, [r3, #32]
 80001f4:	4a08      	ldr	r2, [pc, #32]	@ (8000218 <gpio_init+0x50>)
 80001f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80001fa:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1U << 8);   // PA2 -> AF1 (TIM2_CH3)
 80001fc:	4b06      	ldr	r3, [pc, #24]	@ (8000218 <gpio_init+0x50>)
 80001fe:	6a1b      	ldr	r3, [r3, #32]
 8000200:	4a05      	ldr	r2, [pc, #20]	@ (8000218 <gpio_init+0x50>)
 8000202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000206:	6213      	str	r3, [r2, #32]
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	40023800 	.word	0x40023800
 8000218:	40020000 	.word	0x40020000

0800021c <TIM2_PWM_init>:

void TIM2_PWM_init(void) {
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
    // Activer l'horloge pour TIM2
    RCC->APB1ENR |= TIM2EN;
 8000220:	4b22      	ldr	r3, [pc, #136]	@ (80002ac <TIM2_PWM_init+0x90>)
 8000222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000224:	4a21      	ldr	r2, [pc, #132]	@ (80002ac <TIM2_PWM_init+0x90>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6413      	str	r3, [r2, #64]	@ 0x40

    // Régler la fréquence du PWM
    TIM2->PSC = 16 - 1;    // Divise 16MHz par 16 = 1MHz
 800022c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000230:	220f      	movs	r2, #15
 8000232:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1000 - 1;  // 1 kHz (période 1ms)
 8000234:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000238:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800023c:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Initialisation du compteur
    TIM2->CNT = 0;
 800023e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000242:	2200      	movs	r2, #0
 8000244:	625a      	str	r2, [r3, #36]	@ 0x24

    // Configurer le mode PWM sur CH3 (PA2)
    TIM2->CCMR2 &= ~(7U << 4);  // Effacer les bits de mode (4-6)
 8000246:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800024a:	69db      	ldr	r3, [r3, #28]
 800024c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000254:	61d3      	str	r3, [r2, #28]
    TIM2->CCMR2 |= (6U << 4);   // PWM Mode 1 (110 en binaire)
 8000256:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800025a:	69db      	ldr	r3, [r3, #28]
 800025c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000260:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000264:	61d3      	str	r3, [r2, #28]
    TIM2->CCMR2 |= (1U << 3);   // Activer le preload sur CCR3
 8000266:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800026a:	69db      	ldr	r3, [r3, #28]
 800026c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000270:	f043 0308 	orr.w	r3, r3, #8
 8000274:	61d3      	str	r3, [r2, #28]

    // Activer la sortie CH3
    TIM2->CCER |= (1U << 8);
 8000276:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800027a:	6a1b      	ldr	r3, [r3, #32]
 800027c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000284:	6213      	str	r3, [r2, #32]

    // Initialisation à 50% de PWM
    TIM2->CCR3 = 500;
 8000286:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800028a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800028e:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Activer le timer
    TIM2->CR1 |= TIM_CR1_CEN;
 8000290:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6013      	str	r3, [r2, #0]
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40023800 	.word	0x40023800

080002b0 <TIM4_ms_Delay>:

void TIM4_ms_Delay(uint16_t delay) {
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	80fb      	strh	r3, [r7, #6]
    RCC->APB1ENR |= TIM4EN;  // Activer TIM4
 80002ba:	4b14      	ldr	r3, [pc, #80]	@ (800030c <TIM4_ms_Delay+0x5c>)
 80002bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002be:	4a13      	ldr	r2, [pc, #76]	@ (800030c <TIM4_ms_Delay+0x5c>)
 80002c0:	f043 0304 	orr.w	r3, r3, #4
 80002c4:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM4->PSC = 16000 - 1;   // 16MHz / 16000 = 1kHz (1ms)
 80002c6:	4b12      	ldr	r3, [pc, #72]	@ (8000310 <TIM4_ms_Delay+0x60>)
 80002c8:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80002cc:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM4->ARR = delay;
 80002ce:	4a10      	ldr	r2, [pc, #64]	@ (8000310 <TIM4_ms_Delay+0x60>)
 80002d0:	88fb      	ldrh	r3, [r7, #6]
 80002d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM4->CNT = 0;
 80002d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000310 <TIM4_ms_Delay+0x60>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM4->CR1 |= 1;          // Démarrer
 80002da:	4b0d      	ldr	r3, [pc, #52]	@ (8000310 <TIM4_ms_Delay+0x60>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a0c      	ldr	r2, [pc, #48]	@ (8000310 <TIM4_ms_Delay+0x60>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6013      	str	r3, [r2, #0]
    while (!(TIM4->SR & TIM_SR_UIF)) {}  // Attendre overflow
 80002e6:	bf00      	nop
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <TIM4_ms_Delay+0x60>)
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	f003 0301 	and.w	r3, r3, #1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f9      	beq.n	80002e8 <TIM4_ms_Delay+0x38>
    TIM4->SR &= ~(1U << 0);  // Reset flag
 80002f4:	4b06      	ldr	r3, [pc, #24]	@ (8000310 <TIM4_ms_Delay+0x60>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a05      	ldr	r2, [pc, #20]	@ (8000310 <TIM4_ms_Delay+0x60>)
 80002fa:	f023 0301 	bic.w	r3, r3, #1
 80002fe:	6113      	str	r3, [r2, #16]
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	40023800 	.word	0x40023800
 8000310:	40000800 	.word	0x40000800

08000314 <main>:

int main(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    gpio_init();
 8000318:	f7ff ff56 	bl	80001c8 <gpio_init>
    TIM2_PWM_init();
 800031c:	f7ff ff7e 	bl	800021c <TIM2_PWM_init>

    while (1) {
        TIM2->CCR3 = 200;  // 20% PWM - LED faible
 8000320:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000324:	22c8      	movs	r2, #200	@ 0xc8
 8000326:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM4_ms_Delay(2000);
 8000328:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800032c:	f7ff ffc0 	bl	80002b0 <TIM4_ms_Delay>

        TIM2->CCR3 = 500;  // 50% PWM - LED moyenne
 8000330:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000334:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000338:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM4_ms_Delay(2000);
 800033a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800033e:	f7ff ffb7 	bl	80002b0 <TIM4_ms_Delay>

        TIM2->CCR3 = 900;  // 90% PWM - LED forte
 8000342:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000346:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800034a:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM4_ms_Delay(2000);
 800034c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000350:	f7ff ffae 	bl	80002b0 <TIM4_ms_Delay>
        TIM2->CCR3 = 200;  // 20% PWM - LED faible
 8000354:	bf00      	nop
 8000356:	e7e3      	b.n	8000320 <main+0xc>

08000358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000358:	480d      	ldr	r0, [pc, #52]	@ (8000390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800035c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000360:	480c      	ldr	r0, [pc, #48]	@ (8000394 <LoopForever+0x6>)
  ldr r1, =_edata
 8000362:	490d      	ldr	r1, [pc, #52]	@ (8000398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000364:	4a0d      	ldr	r2, [pc, #52]	@ (800039c <LoopForever+0xe>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000368:	e002      	b.n	8000370 <LoopCopyDataInit>

0800036a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800036c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036e:	3304      	adds	r3, #4

08000370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000374:	d3f9      	bcc.n	800036a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000376:	4a0a      	ldr	r2, [pc, #40]	@ (80003a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000378:	4c0a      	ldr	r4, [pc, #40]	@ (80003a4 <LoopForever+0x16>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800037c:	e001      	b.n	8000382 <LoopFillZerobss>

0800037e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000380:	3204      	adds	r2, #4

08000382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000384:	d3fb      	bcc.n	800037e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000386:	f000 f811 	bl	80003ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038a:	f7ff ffc3 	bl	8000314 <main>

0800038e <LoopForever>:

LoopForever:
  b LoopForever
 800038e:	e7fe      	b.n	800038e <LoopForever>
  ldr   r0, =_estack
 8000390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000398:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800039c:	08000414 	.word	0x08000414
  ldr r2, =_sbss
 80003a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a4:	2000001c 	.word	0x2000001c

080003a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC_IRQHandler>
	...

080003ac <__libc_init_array>:
 80003ac:	b570      	push	{r4, r5, r6, lr}
 80003ae:	4d0d      	ldr	r5, [pc, #52]	@ (80003e4 <__libc_init_array+0x38>)
 80003b0:	4c0d      	ldr	r4, [pc, #52]	@ (80003e8 <__libc_init_array+0x3c>)
 80003b2:	1b64      	subs	r4, r4, r5
 80003b4:	10a4      	asrs	r4, r4, #2
 80003b6:	2600      	movs	r6, #0
 80003b8:	42a6      	cmp	r6, r4
 80003ba:	d109      	bne.n	80003d0 <__libc_init_array+0x24>
 80003bc:	4d0b      	ldr	r5, [pc, #44]	@ (80003ec <__libc_init_array+0x40>)
 80003be:	4c0c      	ldr	r4, [pc, #48]	@ (80003f0 <__libc_init_array+0x44>)
 80003c0:	f000 f818 	bl	80003f4 <_init>
 80003c4:	1b64      	subs	r4, r4, r5
 80003c6:	10a4      	asrs	r4, r4, #2
 80003c8:	2600      	movs	r6, #0
 80003ca:	42a6      	cmp	r6, r4
 80003cc:	d105      	bne.n	80003da <__libc_init_array+0x2e>
 80003ce:	bd70      	pop	{r4, r5, r6, pc}
 80003d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d4:	4798      	blx	r3
 80003d6:	3601      	adds	r6, #1
 80003d8:	e7ee      	b.n	80003b8 <__libc_init_array+0xc>
 80003da:	f855 3b04 	ldr.w	r3, [r5], #4
 80003de:	4798      	blx	r3
 80003e0:	3601      	adds	r6, #1
 80003e2:	e7f2      	b.n	80003ca <__libc_init_array+0x1e>
 80003e4:	0800040c 	.word	0x0800040c
 80003e8:	0800040c 	.word	0x0800040c
 80003ec:	0800040c 	.word	0x0800040c
 80003f0:	08000410 	.word	0x08000410

080003f4 <_init>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr

08000400 <_fini>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr
